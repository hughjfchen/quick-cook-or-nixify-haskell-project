{"version":3,"sources":["dataprovider.js","auth.js","UrlFieldWithCustomLinkText.js","UrlFieldWithLastFileNameAsLinkText.js","jobs.js","App.js","reportWebVitals.js","index.js"],"names":["httpClient","url","options","headers","Headers","Accept","token","localStorage","getItem","set","fetchUtils","fetchJson","dataProvider","postgrestDataProvider","myDataProvider","create","resource","params","data","createReq","formData","FormData","append","parsetype","file","rawFile","method","body","then","json","id","postgrestAuth","login","username","password","request","Request","JSON","stringify","email","fetch","response","status","Error","statusText","me","setItem","checkError","error","removeItem","Promise","reject","resolve","checkAuth","logout","getIdentity","parse","name","role","fullName","getPermissions","useStyles","makeStyles","link","textDecoration","icon","width","height","paddingLeft","UrlFieldWithCustomLinkText","memo","props","className","emptyText","source","linkText","rest","record","useRecordContext","value","get","classes","Typography","component","variant","sanitizeFieldRestProps","Link","href","defaultProps","addLabel","displayName","UrlFieldWithLastFileNameAsLinkText","split","pop","JobList","List","Datagrid","TextField","label","download","DateField","showTime","locales","hour12","target","validateParseType","required","choices","validateDumpFile","tagJobCreateReq","JobCreate","Create","transform","SimpleForm","RadioButtonGroupInput","validate","FileInput","multiple","minSize","maxSize","placeholder","FileField","title","App","Admin","disableTelemetry","authProvider","myAuthProvider","Resource","list","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mRAMMA,EAAa,SAACC,GAAuB,IAAlBC,EAAiB,uDAAP,GAC1BA,EAAQC,UACTD,EAAQC,QAAU,IAAIC,QAAQ,CAAEC,OAAQ,sBAE5C,IAAMC,EAAQC,aAAaC,QAAQ,SAEnC,OADAN,EAAQC,QAAQM,IAAI,gBAApB,iBAA+CH,IACxCI,IAAWC,UAAUV,EAAKC,IAG/BU,EAAeC,YAXI,qCAWoCb,GAwB9Cc,EAtBK,2BACbF,GADa,IAEhBG,OAAQ,SAACC,EAAUC,GACf,GAA+B,iBAA1BA,EAAOC,KAAKC,UAEb,OAAOP,EAAaG,OAAOC,EAAUC,GAGzC,IAAIG,EAAW,IAAIC,SAKnB,OAHAD,EAASE,OAAO,YAAaL,EAAOC,KAAKK,WACzCH,EAASE,OAAO,OAAQL,EAAOC,KAAKM,KAAKC,SAElCzB,EAAW,GAAD,OA3BJ,gCA2BI,cAA8B,CAC3C0B,OAAQ,OACRC,KAAMP,IACPQ,MAAK,gBAAGC,EAAH,EAAGA,KAAH,MAAe,CACnBX,KAAK,2BAAMD,EAAOC,MAAd,IAAoBY,GAAID,EAAKC,YCoB9BC,EArDO,CACpBC,MAAO,YAA6B,IAA1BC,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,SACZC,EAAU,IAAIC,QAAQ,+CAAgD,CAC1EV,OAAQ,OACRC,KAAMU,KAAKC,UAAU,CAAEC,MAAON,EAAUC,aACxC/B,QAAS,IAAIC,QAAQ,CAAE,eAAgB,mBACd,OAAU,oCACV,OAAU,4BAGrC,OAAOoC,MAAML,GACVP,MAAK,SAAAa,GACJ,GAAIA,EAASC,OAAS,KAAOD,EAASC,QAAU,IAC9C,MAAM,IAAIC,MAAMF,EAASG,YAE3B,OAAOH,EAASZ,UAEjBD,MAAK,YAAoB,IAAjBiB,EAAgB,EAAhBA,GAAIvC,EAAY,EAAZA,MACXC,aAAauC,QAAQ,QAASxC,GAC9BC,aAAauC,QAAQ,KAAMT,KAAKC,UAAUO,QAGhDE,WAAY,SAACC,GACX,IAAMN,EAASM,EAAMN,OACrB,OAAe,MAAXA,GAA6B,MAAXA,GACpBnC,aAAa0C,WAAW,SACxB1C,aAAa0C,WAAW,MACjBC,QAAQC,UAEVD,QAAQE,WAEjBC,UAAW,WACT,OAAO9C,aAAaC,QAAQ,SAAW0C,QAAQE,UAAYF,QAAQC,UAErEG,OAAQ,WAGN,OAFA/C,aAAa0C,WAAW,SACxB1C,aAAa0C,WAAW,MACjBC,QAAQE,WAEjBG,YAAa,WACX,IAAK,IAAD,EACgClB,KAAKmB,MAAMjD,aAAaC,QAAQ,OAA1DsB,EADN,EACMA,GAAI2B,EADV,EACUA,KADV,EACgBlB,MADhB,EACuBmB,KACzB,OAAOR,QAAQE,QAAQ,CAAEtB,KAAI6B,SAASF,IACtC,MAAOT,GACP,OAAOE,QAAQC,OAAOH,KAG1BY,eAAgB,WACd,IAAMF,EAAOrB,KAAKmB,MAAMjD,aAAaC,QAAQ,OAAOkD,KACpD,OAAOA,EAAOR,QAAQE,QAAQM,GAAQR,QAAQC,W,yLCzC5CU,EAAYC,YAAW,CACzBC,KAAM,CACFC,eAAgB,QAEpBC,KAAM,CACFC,MAAO,QACPC,OAAQ,QACRC,YAAa,KAIfC,EAAkEC,gBAAK,SAAAC,GAAU,IAC3EC,EAAoDD,EAApDC,UAAWC,EAAyCF,EAAzCE,UAAWC,EAA8BH,EAA9BG,OAAQC,EAAsBJ,EAAtBI,SAAaC,EAD+B,YACtBL,EADsB,+CAE5EM,EAASC,YAAiBP,GAC1BQ,EAAQC,IAAIH,EAAQH,GACpBO,EAAUpB,IAEhB,OAAa,MAATkB,EAEI,cAACG,EAAA,EAAD,yBACIC,UAAU,OACVC,QAAQ,QACRZ,UAAWA,GACPa,YAAuBT,IAJ/B,aAMKH,KAMT,eAACa,EAAA,EAAD,yBACEd,UAAWS,EAAQlB,KACjBwB,KAAMR,EACNK,QAAQ,SACJC,YAAuBT,IAJ/B,cAMKD,EACH,cAAC,IAAD,CAAYH,UAAWS,EAAQhB,cAKzCI,EAA2BmB,aAAe,CACtCC,UAAU,GAIdpB,EAA2BqB,YAAc,6BAO1BrB,QCvDTR,EAAYC,YAAW,CACzBC,KAAM,CACFC,eAAgB,QAEpBC,KAAM,CACFC,MAAO,QACPC,OAAQ,QACRC,YAAa,KAIfuB,EAAkFrB,gBAAK,SAAAC,GAAU,IAC3FC,EAAoDD,EAApDC,UAAWC,EAAyCF,EAAzCE,UAAWC,EAA8BH,EAA9BG,OAAqBE,GAASL,EAAtBI,SAD4D,YACtCJ,EADsC,gDAE5FM,EAASC,YAAiBP,GAC1BQ,EAAQC,IAAIH,EAAQH,GACpBO,EAAUpB,IAEhB,OAAa,MAATkB,EAEI,cAACG,EAAA,EAAD,yBACIC,UAAU,OACVC,QAAQ,QACRZ,UAAWA,GACPa,YAAuBT,IAJ/B,aAMKH,KAMT,eAACa,EAAA,EAAD,yBACEd,UAAWS,EAAQlB,KACjBwB,KAAMR,EACNK,QAAQ,SACJC,YAAuBT,IAJ/B,cAMGG,EAAMa,MAAM,KAAKC,MAClB,cAAC,IAAD,CAAYrB,UAAWS,EAAQhB,cAKzC0B,EAAmCH,aAAe,CAC9CC,UAAU,GAIdE,EAAmCD,YAAc,qCAOlCC,QC3CFG,EAAU,SAAAvB,GAAK,OACxB,cAACwB,EAAA,EAAD,2BAAUxB,GAAV,aACG,eAACyB,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAWvB,OAAO,cAAcwB,MAAM,eACtC,cAAC,EAAD,CAAoCxB,OAAO,4BAA4ByB,UAAU,EAAMD,MAAM,cAC7F,cAACE,EAAA,EAAD,CAAW1B,OAAO,aAAa2B,UAAU,EAAMC,QAAQ,QAAQpG,QAAS,CAACqG,QAAQ,KACjF,cAACH,EAAA,EAAD,CAAW1B,OAAO,SAAS2B,UAAU,EAAMC,QAAQ,QAAQpG,QAAS,CAACqG,QAAQ,KAC7E,cAACH,EAAA,EAAD,CAAW1B,OAAO,aAAa2B,UAAU,EAAMC,QAAQ,QAAQpG,QAAS,CAACqG,QAAQ,KACjF,cAACN,EAAA,EAAD,CAAWvB,OAAO,WAClB,cAAC,EAAD,CAA4BA,OAAO,yBAAyBC,SAAS,SAAS6B,OAAO,SAASN,MAAM,kBAKvGO,EAAoB,CAACC,cAAYC,YAAQ,CAAC,gBAAiB,iBAAkB,oCAC7EC,EAAmB,CAACF,eACpBG,EAAkB,SAAA3F,GAAI,kCACvBA,GADuB,IAE1BC,UAAW,kBAGA2F,EAAY,SAAAvC,GAAK,OACzB,cAACwC,EAAA,EAAD,2BAAYxC,GAAZ,IAAmByC,UAAWH,EAA9B,SACG,eAACI,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAuBxC,OAAO,YAAYiC,QAAS,CACjD,CAAE7E,GAAI,gBAAiB2B,KAAM,aAC7B,CAAE3B,GAAI,gBAAiB2B,KAAM,cAC5B0D,SAAUV,IACb,cAACW,EAAA,EAAD,CAAW1C,OAAO,OAAOwB,MAAM,iBAAiBmB,UAAU,EAAOC,QAAS,EAAGC,QAAS,IAAYC,YAAa,8DAAsCL,SAAUP,EAA/J,SACE,cAACa,EAAA,EAAD,CAAW/C,OAAO,MAAMgD,MAAM,mBCrC3BC,EANH,kBACR,cAACC,EAAA,EAAD,CAAOC,kBAAgB,EAACH,MAAM,qBAAqB9G,aAAcE,EAAgBgH,aAAcC,EAA/F,SACI,cAACC,EAAA,EAAD,CAAUvE,KAAK,OAAOwE,KAAMnC,EAAS/E,OAAQ+F,OCGtCoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBxG,MAAK,YAAkD,IAA/CyG,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.261f013b.chunk.js","sourcesContent":["import { fetchUtils } from \"react-admin\";\nimport postgrestDataProvider from '@raphiniert/ra-data-postgrest';\n\nconst servicesHost = 'http://www.detachmentsoft.top';\nconst servicesHostHome = 'http://www.detachmentsoft.top/rest';\n\nconst httpClient = (url, options = {}) => {\n    if (!options.headers) {\n        options.headers = new Headers({ Accept: 'application/json' });\n    }\n    const token = localStorage.getItem('token');\n    options.headers.set('Authorization', `Bearer ${token}`);\n    return fetchUtils.fetchJson(url, options);\n};\n\nconst dataProvider = postgrestDataProvider(servicesHostHome, httpClient);\n\nconst myDataProvider = {\n    ...dataProvider,\n    create: (resource, params) => {\n        if ( params.data.createReq !== \"JobCreateReq\") {\n            // fallback to the default implementation\n            return dataProvider.create(resource, params);\n        }\n\n        let formData = new FormData();\n\n        formData.append('parsetype', params.data.parsetype);\n        formData.append('file', params.data.file.rawFile);\n\n        return httpClient(`${servicesHost}/parsedump`, {\n            method: 'POST',\n            body: formData,\n        }).then(({ json }) => ({\n            data: { ...params.data, id: json.id },\n        }));\n    }\n};\n\nexport default myDataProvider;\n","\nconst postgrestAuth = {\n  login: ({ username, password }) => {\n    const request = new Request('http://www.detachmentsoft.top/rest/rpc/login', {\n      method: 'POST',\n      body: JSON.stringify({ email: username, password }),\n      headers: new Headers({ 'Content-Type': 'application/json'\n                             , 'Accept': 'application/vnd.pgrst.object+json'\n                             , 'Prefer': 'return=representation'\n                           }),\n    });\n    return fetch(request)\n      .then(response => {\n        if (response.status < 200 || response.status >= 300) {\n          throw new Error(response.statusText);\n        }\n        return response.json();\n      })\n      .then(({ me, token }) => {\n        localStorage.setItem('token', token);\n        localStorage.setItem('me', JSON.stringify(me));\n      });\n  },\n  checkError: (error) => {\n    const status = error.status;\n    if (status === 401 || status === 403) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('me');\n      return Promise.reject();\n    }\n    return Promise.resolve();\n  },\n  checkAuth: () => {\n    return localStorage.getItem('token') ? Promise.resolve() : Promise.reject();\n  },\n  logout: () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('me');\n    return Promise.resolve();\n  },\n  getIdentity: () => {\n    try {\n      const { id, name, email, role } = JSON.parse(localStorage.getItem('me'));\n      return Promise.resolve({ id, fullName:name });\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  },\n  getPermissions: () => {\n    const role = JSON.parse(localStorage.getItem('me')).role;\n    return role ? Promise.resolve(role) : Promise.reject();\n  }\n};\n\nexport default postgrestAuth;\n","import * as React from 'react';\nimport { AnchorHTMLAttributes, memo, FC } from 'react';\nimport get from 'lodash/get';\nimport { Typography, Link } from '@material-ui/core';\nimport { useRecordContext } from 'ra-core';\nimport { sanitizeFieldRestProps, PublicFieldProps, InjectedFieldProps, fieldPropTypes } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst useStyles = makeStyles({\n    link: {\n        textDecoration: 'none',\n    },\n    icon: {\n        width: '0.5em',\n        height: '0.5em',\n        paddingLeft: 2,\n    },\n});\n\nconst UrlFieldWithCustomLinkText: FC<UrlFieldWithCustomLinkTextProps> = memo(props => {\n    const { className, emptyText, source, linkText, ...rest } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source);\n    const classes = useStyles();\n\n    if (value == null) {\n        return (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText}\n            </Typography>\n        );\n    }\n\n    return (\n        <Link\n          className={classes.link}\n            href={value}\n            variant=\"body2\"\n            {...sanitizeFieldRestProps(rest)}\n        >\n            {linkText}\n          <LaunchIcon className={classes.icon} />\n        </Link>\n    );\n});\n\nUrlFieldWithCustomLinkText.defaultProps = {\n    addLabel: true,\n};\n\nUrlFieldWithCustomLinkText.propTypes = fieldPropTypes;\nUrlFieldWithCustomLinkText.displayName = 'UrlFieldWithCustomLinkText';\n\nexport interface UrlFieldWithCustomLinkTextProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        AnchorHTMLAttributes<HTMLAnchorElement> {}\n\nexport default UrlFieldWithCustomLinkText;\n","import * as React from 'react';\nimport { AnchorHTMLAttributes, memo, FC } from 'react';\nimport get from 'lodash/get';\nimport { Typography, Link } from '@material-ui/core';\nimport { useRecordContext } from 'ra-core';\nimport { sanitizeFieldRestProps, PublicFieldProps, InjectedFieldProps, fieldPropTypes } from 'react-admin';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LaunchIcon from '@material-ui/icons/Launch';\n\nconst useStyles = makeStyles({\n    link: {\n        textDecoration: 'none',\n    },\n    icon: {\n        width: '0.5em',\n        height: '0.5em',\n        paddingLeft: 2,\n    },\n});\n\nconst UrlFieldWithLastFileNameAsLinkText: FC<UrlFieldWithLastFileNameAsLinkTextProps> = memo(props => {\n    const { className, emptyText, source, linkText, ...rest } = props;\n    const record = useRecordContext(props);\n    const value = get(record, source);\n    const classes = useStyles();\n\n    if (value == null) {\n        return (\n            <Typography\n                component=\"span\"\n                variant=\"body2\"\n                className={className}\n                {...sanitizeFieldRestProps(rest)}\n            >\n                {emptyText}\n            </Typography>\n        );\n    }\n\n    return (\n        <Link\n          className={classes.link}\n            href={value}\n            variant=\"body2\"\n            {...sanitizeFieldRestProps(rest)}\n        >\n          {value.split('/').pop()}\n          <LaunchIcon className={classes.icon} />\n        </Link>\n    );\n});\n\nUrlFieldWithLastFileNameAsLinkText.defaultProps = {\n    addLabel: true,\n};\n\nUrlFieldWithLastFileNameAsLinkText.propTypes = fieldPropTypes;\nUrlFieldWithLastFileNameAsLinkText.displayName = 'UrlFieldWithLastFileNameAsLinkText';\n\nexport interface UrlFieldWithLastFileNameAsLinkTextProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        AnchorHTMLAttributes<HTMLAnchorElement> {}\n\nexport default UrlFieldWithLastFileNameAsLinkText;\n","// in jobs.js\nimport * as React from \"react\";\nimport {\n    List,\n    Datagrid,\n    TextField,\n    DateField,\n    FileField,\n    Create,\n    SimpleForm,\n    RadioButtonGroupInput,\n  FileInput,\n  required,\n  choices,\n} from 'react-admin';\nimport UrlFieldWithCustomLinkText from './UrlFieldWithCustomLinkText';\nimport UrlFieldWithLastFileNameAsLinkText from './UrlFieldWithLastFileNameAsLinkText';\n\n         // <FunctionField render={record => `${record.payload.contents.contents.split('/').pop()}`} label=\"Dump File\"/>\n         // <TextField source=\"payload.contents.contents\" label=\"Dump File\"/>\n         // <DumpFileField source=\"payload.contents.contents\" label=\"Dump File\"/>\nexport const JobList = props => (\n    <List {...props}>\n       <Datagrid>\n         <TextField source=\"payload.tag\" label=\"Parse Type\"/>\n         <UrlFieldWithLastFileNameAsLinkText source=\"payload.contents.contents\" download={true} label=\"Dump File\"/>\n         <DateField source=\"created_at\" showTime={true} locales='zh-CN' options={{hour12: false}}/>\n         <DateField source=\"run_at\" showTime={true} locales='zh-CN' options={{hour12: false}}/>\n         <DateField source=\"updated_at\" showTime={true} locales='zh-CN' options={{hour12: false}}/>\n         <TextField source=\"status\" />\n         <UrlFieldWithCustomLinkText source=\"last_update.report_url\" linkText=\"Report\" target=\"_blank\" label=\"Report\"/>\n       </Datagrid>\n   </List>\n);\n\nconst validateParseType = [required(), choices(['ParseJavaCore', 'ParseHeapDump'], 'Please choose one of the values')];\nconst validateDumpFile = [required()]\nconst tagJobCreateReq = data => ({\n  ...data,\n  createReq: \"JobCreateReq\"\n});\n\nexport const JobCreate = props => (\n     <Create {...props} transform={tagJobCreateReq} >\n        <SimpleForm>\n          <RadioButtonGroupInput source=\"parsetype\" choices={[\n            { id: 'ParseJavaCore', name: 'Java Core' },\n            { id: 'ParseHeapDump', name: 'Heap Dump' },\n          ]} validate={validateParseType}/>\n          <FileInput source=\"file\" label=\"Java Dump File\" multiple={false} minSize={0} maxSize={1000000000} placeholder={<p>Drop your java dump file here</p>} validate={validateDumpFile}>\n            <FileField source=\"src\" title=\"title\" />\n          </FileInput>\n        </SimpleForm>\n     </Create>\n);\n","import React from 'react';\nimport { Admin, Resource } from 'react-admin';\nimport myDataProvider from './dataprovider';\nimport myAuthProvider from './auth';\nimport { JobList, JobCreate } from './jobs';\n\n\nconst App = () => (\n    <Admin disableTelemetry title=\"Java Dump Analyzer\" dataProvider={myDataProvider} authProvider={myAuthProvider}>\n        <Resource name=\"jobs\" list={JobList} create={JobCreate}/>\n    </Admin>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}